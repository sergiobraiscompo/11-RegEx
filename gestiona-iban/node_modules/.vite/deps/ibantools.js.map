{
  "version": 3,
  "sources": ["../../ibantools/jsnext/ibantools.js"],
  "sourcesContent": ["/*!\n * @license\n * Copyright Saša Jovanić\n * Licensed under the Mozilla Public License, Version 2.0 or the MIT license,\n * at your option. This file may not be copied, modified, or distributed\n * except according to those terms.\n * SPDX-FileCopyrightText: Saša Jovanić\n * SPDX-License-Identifier: MIT or MPL/2.0\n */\n/**\n * Validation, extraction and creation of IBAN, BBAN, BIC/SWIFT numbers plus some other helpful stuff\n * @package Documentation\n * @author Saša Jovanić\n * @module ibantools\n * @version 4.5.1\n * @license MIT or MPL-2.0\n * @preferred\n */\n'use strict';\n/**\n * Validate IBAN\n * ```\n * // returns true\n * ibantools.isValidIBAN(\"NL91ABNA0417164300\");\n * ```\n * ```\n * // returns false\n * ibantools.isValidIBAN(\"NL92ABNA0517164300\");\n * ```\n * ```\n * // returns true\n * ibantools.isValidIBAN('CH4431999123000889012');\n * ```\n * ```\n * // returns false\n * ibantools.isValidIBAN('CH4431999123000889012', { allowQRIBAN: false });\n * ```\n */\nexport function isValidIBAN(iban, validationOptions) {\n    if (validationOptions === void 0) { validationOptions = { allowQRIBAN: true }; }\n    if (iban === undefined || iban === null)\n        return false;\n    var reg = new RegExp('^[0-9]{2}$', '');\n    var countryCode = iban.slice(0, 2);\n    var spec = countrySpecs[countryCode];\n    if (spec === undefined || spec.bban_regexp === undefined || spec.bban_regexp === null || spec.chars === undefined)\n        return false;\n    return (spec.chars === iban.length &&\n        reg.test(iban.slice(2, 4)) &&\n        isValidBBAN(iban.slice(4), countryCode) &&\n        isValidIBANChecksum(iban) &&\n        (validationOptions.allowQRIBAN || !isQRIBAN(iban)));\n}\n/**\n * IBAM validation errors\n */\nexport var ValidationErrorsIBAN;\n(function (ValidationErrorsIBAN) {\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"NoIBANProvided\"] = 0] = \"NoIBANProvided\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"NoIBANCountry\"] = 1] = \"NoIBANCountry\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"WrongBBANLength\"] = 2] = \"WrongBBANLength\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"WrongBBANFormat\"] = 3] = \"WrongBBANFormat\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"ChecksumNotNumber\"] = 4] = \"ChecksumNotNumber\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"WrongIBANChecksum\"] = 5] = \"WrongIBANChecksum\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"WrongAccountBankBranchChecksum\"] = 6] = \"WrongAccountBankBranchChecksum\";\n    ValidationErrorsIBAN[ValidationErrorsIBAN[\"QRIBANNotAllowed\"] = 7] = \"QRIBANNotAllowed\";\n})(ValidationErrorsIBAN || (ValidationErrorsIBAN = {}));\n/**\n * validateIBAN\n * ```\n * // returns {errorCodes: [], valid: true}\n * ibantools.validateIBAN(\"NL91ABNA0417164300\");\n * ```\n * ```\n * ```\n * // returns {errorCodes: [], valid: true}\n * ibantools.validateIBAN('CH4431999123000889012');\n * ```\n * ```\n * // returns {errorCodes: [7], valid: false}\n * ibantools.validateIBAN('CH4431999123000889012', { allowQRIBAN: false });\n * ```\n */\nexport function validateIBAN(iban, validationOptions) {\n    if (validationOptions === void 0) { validationOptions = { allowQRIBAN: true }; }\n    var result = { errorCodes: [], valid: true };\n    if (iban !== undefined && iban !== null && iban !== '') {\n        var spec = countrySpecs[iban.slice(0, 2)];\n        if (!spec || !(spec.bban_regexp || spec.chars)) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.NoIBANCountry);\n            return result;\n        }\n        if (spec && spec.chars && spec.chars !== iban.length) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.WrongBBANLength);\n        }\n        if (spec && spec.bban_regexp && !checkFormatBBAN(iban.slice(4), spec.bban_regexp)) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.WrongBBANFormat);\n        }\n        if (spec && spec.bban_validation_func && !spec.bban_validation_func(iban.slice(4))) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.WrongAccountBankBranchChecksum);\n        }\n        var reg = new RegExp('^[0-9]{2}$', '');\n        if (!reg.test(iban.slice(2, 4))) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.ChecksumNotNumber);\n        }\n        if (result.errorCodes.indexOf(ValidationErrorsIBAN.WrongBBANFormat) !== -1 || !isValidIBANChecksum(iban)) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.WrongIBANChecksum);\n        }\n        if (!validationOptions.allowQRIBAN && isQRIBAN(iban)) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsIBAN.QRIBANNotAllowed);\n        }\n    }\n    else {\n        result.valid = false;\n        result.errorCodes.push(ValidationErrorsIBAN.NoIBANProvided);\n    }\n    return result;\n}\n/**\n * Validate BBAN\n *\n * ```\n * // returns true\n * ibantools.isValidBBAN(\"ABNA0417164300\", \"NL\");\n * ```\n * ```\n * // returns false\n * ibantools.isValidBBAN(\"A7NA0517164300\", \"NL\");\n * ```\n */\nexport function isValidBBAN(bban, countryCode) {\n    if (bban === undefined || bban === null || countryCode === undefined || countryCode === null)\n        return false;\n    var spec = countrySpecs[countryCode];\n    if (spec === undefined ||\n        spec === null ||\n        spec.bban_regexp === undefined ||\n        spec.bban_regexp === null ||\n        spec.chars === undefined ||\n        spec.chars === null)\n        return false;\n    if (spec.chars - 4 === bban.length && checkFormatBBAN(bban, spec.bban_regexp)) {\n        if (spec.bban_validation_func) {\n            return spec.bban_validation_func(bban.replace(/[\\s.]+/g, ''));\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Validate if country code is from a SEPA country\n * ```\n * // returns true\n * ibantools.isSEPACountry(\"NL\");\n * ```\n * ```\n * // returns false\n * ibantools.isSEPACountry(\"PK\");\n * ```\n */\nexport function isSEPACountry(countryCode) {\n    if (countryCode !== undefined && countryCode !== null) {\n        var spec = countrySpecs[countryCode];\n        if (spec !== undefined) {\n            return spec.SEPA ? spec.SEPA : false;\n        }\n    }\n    return false;\n}\n/**\n * Check if IBAN is QR-IBAN\n * ```\n * // returns true\n * ibantools.isQRIBAN(\"CH4431999123000889012\");\n * ```\n * ```\n * // returns false\n * ibantools.isQRIBAN(\"NL92ABNA0517164300\");\n * ```\n */\nexport function isQRIBAN(iban) {\n    if (iban === undefined || iban === null)\n        return false;\n    var countryCode = iban.slice(0, 2);\n    var QRIBANCountries = ['LI', 'CH'];\n    if (!QRIBANCountries.includes(countryCode))\n        return false;\n    var reg = new RegExp('^3[0-1]{1}[0-9]{3}$', '');\n    return reg.test(iban.slice(4, 9));\n}\n/**\n * composeIBAN\n *\n * ```\n * // returns NL91ABNA0417164300\n * ibantools.composeIBAN({ countryCode: \"NL\", bban: \"ABNA0417164300\" });\n * ```\n */\nexport function composeIBAN(params) {\n    var formated_bban = electronicFormatIBAN(params.bban) || '';\n    if (params.countryCode === null || params.countryCode === undefined) {\n        return null;\n    }\n    var spec = countrySpecs[params.countryCode];\n    if (formated_bban !== '' &&\n        spec !== undefined &&\n        spec.chars &&\n        spec.chars !== null &&\n        spec.chars === formated_bban.length + 4 &&\n        spec.bban_regexp &&\n        spec.bban_regexp !== null &&\n        checkFormatBBAN(formated_bban, spec.bban_regexp)) {\n        var checksom = mod9710Iban(params.countryCode + '00' + formated_bban);\n        return params.countryCode + ('0' + (98 - checksom)).slice(-2) + formated_bban;\n    }\n    return null;\n}\n/**\n * extractIBAN\n * ```\n * // returns {iban: \"NL91ABNA0417164300\", bban: \"ABNA0417164300\", countryCode: \"NL\", valid: true, accountNumber: '0417164300', bankIdentifier: 'ABNA'}\n * ibantools.extractIBAN(\"NL91 ABNA 0417 1643 00\");\n * ```\n */\nexport function extractIBAN(iban) {\n    var result = {};\n    var eFormatIBAN = electronicFormatIBAN(iban);\n    result.iban = eFormatIBAN || iban;\n    if (!!eFormatIBAN && isValidIBAN(eFormatIBAN)) {\n        result.bban = eFormatIBAN.slice(4);\n        result.countryCode = eFormatIBAN.slice(0, 2);\n        result.valid = true;\n        var spec = countrySpecs[result.countryCode];\n        if (spec.account_indentifier) {\n            var ac = spec.account_indentifier.split('-');\n            var starting = parseInt(ac[0]);\n            var ending = parseInt(ac[1]);\n            result.accountNumber = result.iban.slice(starting, ending + 1);\n        }\n        if (spec.bank_identifier) {\n            var ac = spec.bank_identifier.split('-');\n            var starting = parseInt(ac[0]);\n            var ending = parseInt(ac[1]);\n            result.bankIdentifier = result.bban.slice(starting, ending + 1);\n        }\n        if (spec.branch_indentifier) {\n            var ac = spec.branch_indentifier.split('-');\n            var starting = parseInt(ac[0]);\n            var ending = parseInt(ac[1]);\n            result.branchIdentifier = result.bban.slice(starting, ending + 1);\n        }\n    }\n    else {\n        result.valid = false;\n    }\n    return result;\n}\n/**\n * Check BBAN format\n *\n * @ignore\n */\nfunction checkFormatBBAN(bban, bformat) {\n    var reg = new RegExp(bformat, '');\n    return reg.test(bban);\n}\n/**\n * Get IBAN in electronic format (no spaces)\n * IBAN validation is not performed.\n * When non-string value for IBAN is provided, returns null.\n * ```\n * // returns \"NL91ABNA0417164300\"\n * ibantools.electronicFormatIBAN(\"NL91 ABNA 0417 1643 00\");\n * ```\n */\nexport function electronicFormatIBAN(iban) {\n    if (typeof iban !== 'string') {\n        return null;\n    }\n    return iban.replace(/[-\\ ]/g, '').toUpperCase();\n}\n/**\n * Get IBAN in friendly format (separated after every 4 characters)\n * IBAN validation is not performed.\n * When non-string value for IBAN is provided, returns null.\n * ```\n * // returns \"NL91 ABNA 0417 1643 00\"\n * ibantools.friendlyFormatIBAN(\"NL91ABNA0417164300\");\n * ```\n * ```\n * // returns \"NL91-ABNA-0417-1643-00\"\n * ibantools.friendlyFormatIBAN(\"NL91ABNA0417164300\",\"-\");\n * ```\n */\nexport function friendlyFormatIBAN(iban, separator) {\n    if (typeof iban !== 'string') {\n        return null;\n    }\n    if (separator === undefined || separator === null) {\n        separator = ' ';\n    }\n    var electronic_iban = electronicFormatIBAN(iban);\n    /* istanbul ignore if */\n    if (electronic_iban === null) {\n        return null;\n    }\n    return electronic_iban.replace(/(.{4})(?!$)/g, '$1' + separator);\n}\n/**\n * Calculate checksum of IBAN and compares it with checksum provided in IBAN Registry\n *\n * @ignore\n */\nfunction isValidIBANChecksum(iban) {\n    var countryCode = iban.slice(0, 2);\n    var providedChecksum = parseInt(iban.slice(2, 4), 10);\n    var bban = iban.slice(4);\n    // Wikipedia[validating_iban] says there are a specif way to check if a IBAN is valid but\n    // it. It says 'If the remainder is 1, the check digit test is passed and the\n    // IBAN might be valid.'. might, MIGHT!\n    // We don't want might but want yes or no. Since every BBAN is IBAN from the fifth\n    // (slice(4)) we can generate the IBAN from BBAN and country code(two first characters)\n    // from in the IBAN.\n    // To generate the (generate the iban check digits)[generating-iban-check]\n    //   Move the country code to the end\n    //   remove the checksum from the begging\n    //   Add \"00\" to the end\n    //   modulo 97 on the amount\n    //   subtract remainder from 98, (98 - remainder)\n    //   Add a leading 0 if the remainder is less then 10 (padStart(2, \"0\")) (we skip this\n    //     since we compare int, not string)\n    //\n    // [validating_iban][https://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN]\n    // [generating-iban-check][https://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits]\n    var validationString = replaceCharaterWithCode(\"\".concat(bban).concat(countryCode, \"00\"));\n    var rest = mod9710(validationString);\n    return 98 - rest === providedChecksum;\n}\n/**\n * Iban contain characters and should be converted to intereger by 55 substracted\n * from there ascii value\n *\n * @ignore\n */\nfunction replaceCharaterWithCode(str) {\n    // It is slower but alot more readable\n    // https://jsbench.me/ttkzgsekae/1\n    return str\n        .split('')\n        .map(function (c) {\n        var code = c.charCodeAt(0);\n        return code >= 65 ? (code - 55).toString() : c;\n    })\n        .join('');\n}\n/**\n * MOD-97-10\n *\n * @ignore\n */\nfunction mod9710Iban(iban) {\n    return mod9710(replaceCharaterWithCode(iban.slice(4) + iban.slice(0, 4)));\n}\n/**\n * Returns specifications for all countries, even those who are not\n * members of IBAN registry. `IBANRegistry` field indicates if country\n * is member of not.\n *\n * ```\n * // Validating IBAN form field after user selects his country\n * // <select id=\"countries\">\n * //   ...\n * //   <option value=\"NL\">Netherlands</option>\n * //   ...\n * // </select>\n * $(\"#countries\").select(function() {\n *   // Find country\n *   let country = ibantools.getCountrySpecifications()[$(this).val()];\n *   // Add country code letters to IBAN form field\n *   $(\"input#iban\").value($(this).val());\n *   // Add New value to \"pattern\" attribute to #iban input text field\n *   $(\"input#iban\").attr(\"pattern\", $(this).val() + \"[0-9]{2}\" + country.bban_regexp.slice(1).replace(\"$\",\"\"));\n * });\n * ```\n */\nexport function getCountrySpecifications() {\n    var countyMap = {};\n    for (var countyCode in countrySpecs) {\n        var county = countrySpecs[countyCode];\n        countyMap[countyCode] = {\n            chars: county.chars || null,\n            bban_regexp: county.bban_regexp || null,\n            IBANRegistry: county.IBANRegistry || false,\n            SEPA: county.SEPA || false,\n        };\n    }\n    return countyMap;\n}\n/**\n * Validate BIC/SWIFT\n *\n * ```\n * // returns true\n * ibantools.isValidBIC(\"ABNANL2A\");\n *\n * // returns true\n * ibantools.isValidBIC(\"NEDSZAJJXXX\");\n *\n * // returns false\n * ibantools.isValidBIC(\"ABN4NL2A\");\n *\n * // returns false\n * ibantools.isValidBIC(\"ABNA NL 2A\");\n * ```\n */\nexport function isValidBIC(bic) {\n    if (!bic) {\n        return false;\n    }\n    var reg = new RegExp('^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$', '');\n    var spec = countrySpecs[bic.toUpperCase().slice(4, 6)];\n    return reg.test(bic) && spec !== undefined;\n}\n/**\n * BIC validation errors\n */\nexport var ValidationErrorsBIC;\n(function (ValidationErrorsBIC) {\n    ValidationErrorsBIC[ValidationErrorsBIC[\"NoBICProvided\"] = 0] = \"NoBICProvided\";\n    ValidationErrorsBIC[ValidationErrorsBIC[\"NoBICCountry\"] = 1] = \"NoBICCountry\";\n    ValidationErrorsBIC[ValidationErrorsBIC[\"WrongBICFormat\"] = 2] = \"WrongBICFormat\";\n})(ValidationErrorsBIC || (ValidationErrorsBIC = {}));\n/**\n * validateBIC\n * ```\n * // returns {errorCodes: [], valid: true}\n * ibantools.validateBIC(\"NEDSZAJJXXX\");\n * ```\n */\nexport function validateBIC(bic) {\n    var result = { errorCodes: [], valid: true };\n    if (bic !== undefined && bic !== null && bic !== '') {\n        var spec = countrySpecs[bic.toUpperCase().slice(4, 6)];\n        if (spec === undefined) {\n            result.valid = false;\n            result.errorCodes.push(ValidationErrorsBIC.NoBICCountry);\n        }\n        else {\n            var reg = new RegExp('^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$', '');\n            if (!reg.test(bic)) {\n                result.valid = false;\n                result.errorCodes.push(ValidationErrorsBIC.WrongBICFormat);\n            }\n        }\n    }\n    else {\n        result.valid = false;\n        result.errorCodes.push(ValidationErrorsBIC.NoBICProvided);\n    }\n    return result;\n}\n/**\n * extractBIC\n * ```\n * // returns {bankCode: \"ABNA\", countryCode: \"NL\", locationCode: \"2A\", branchCode: null, testBIC: false, valid: true}\n * ibantools.extractBIC(\"ABNANL2A\");\n * ```\n */\nexport function extractBIC(inputBic) {\n    var result = {};\n    var bic = inputBic.toUpperCase();\n    if (isValidBIC(bic)) {\n        result.bankCode = bic.slice(0, 4);\n        result.countryCode = bic.slice(4, 6);\n        result.locationCode = bic.slice(6, 8);\n        result.testBIC = result.locationCode[1] === '0' ? true : false;\n        result.branchCode = bic.length > 8 ? bic.slice(8) : null;\n        result.valid = true;\n    }\n    else {\n        result.valid = false;\n    }\n    return result;\n}\n/**\n * Used for Norway BBAN check\n *\n * @ignore\n */\nvar checkNorwayBBAN = function (bban) {\n    var weights = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];\n    var bbanWithoutSpacesAndPeriods = bban.replace(/[\\s.]+/g, '');\n    var controlDigit = parseInt(bbanWithoutSpacesAndPeriods.charAt(10), 10);\n    var bbanWithoutControlDigit = bbanWithoutSpacesAndPeriods.substring(0, 10);\n    var sum = 0;\n    for (var index = 0; index < 10; index++) {\n        sum += parseInt(bbanWithoutControlDigit.charAt(index), 10) * weights[index];\n    }\n    var remainder = sum % 11;\n    return controlDigit === (remainder === 0 ? 0 : 11 - remainder);\n};\n/**\n * Used for Belgian BBAN check\n *\n * @ignore\n */\nvar checkBelgianBBAN = function (bban) {\n    var stripped = bban.replace(/[\\s.]+/g, '');\n    var checkingPart = parseInt(stripped.substring(0, stripped.length - 2), 10);\n    var checksum = parseInt(stripped.substring(stripped.length - 2, stripped.length), 10);\n    var remainder = checkingPart % 97 === 0 ? 97 : checkingPart % 97;\n    return remainder === checksum;\n};\n/**\n * Mod 97/10 calculation\n *\n * @ignore\n */\nvar mod9710 = function (validationString) {\n    while (validationString.length > 2) {\n        // > Any computer programming language or software package that is used to compute D\n        // > mod 97 directly must have the ability to handle integers of more than 30 digits.\n        // > In practice, this can only be done by software that either supports\n        // > arbitrary-precision arithmetic or that can handle 219-bit (unsigned) integers\n        // https://en.wikipedia.org/wiki/International_Bank_Account_Number#Modulo_operation_on_IBAN\n        var part = validationString.slice(0, 6);\n        var partInt = parseInt(part, 10);\n        if (isNaN(partInt)) {\n            return NaN;\n        }\n        validationString = (partInt % 97) + validationString.slice(part.length);\n    }\n    return parseInt(validationString, 10) % 97;\n};\n/**\n * Check BBAN based on Mod97/10 calculation for countries that support it:\n * BA, ME, MK, PT, RS, SI\n *\n * @ignore\n */\nvar checkMod9710BBAN = function (bban) {\n    var stripped = bban.replace(/[\\s.]+/g, '');\n    var reminder = mod9710(stripped);\n    return reminder === 1;\n};\n/**\n * Used for Poland BBAN check\n *\n * @ignore\n */\nvar checkPolandBBAN = function (bban) {\n    var weights = [3, 9, 7, 1, 3, 9, 7];\n    var controlDigit = parseInt(bban.charAt(7), 10);\n    var toCheck = bban.substring(0, 7);\n    var sum = 0;\n    for (var index = 0; index < 7; index++) {\n        sum += parseInt(toCheck.charAt(index), 10) * weights[index];\n    }\n    var remainder = sum % 10;\n    return controlDigit === (remainder === 0 ? 0 : 10 - remainder);\n};\n/**\n * Spain (ES) BBAN check\n *\n * @ignore\n */\nvar checkSpainBBAN = function (bban) {\n    var weightsBankBranch = [4, 8, 5, 10, 9, 7, 3, 6];\n    var weightsAccount = [1, 2, 4, 8, 5, 10, 9, 7, 3, 6];\n    var controlBankBranch = parseInt(bban.charAt(8), 10);\n    var controlAccount = parseInt(bban.charAt(9), 10);\n    var bankBranch = bban.substring(0, 8);\n    var account = bban.substring(10, 20);\n    var sum = 0;\n    for (var index = 0; index < 8; index++) {\n        sum += parseInt(bankBranch.charAt(index), 10) * weightsBankBranch[index];\n    }\n    var remainder = sum % 11;\n    if (controlBankBranch !== (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder)) {\n        return false;\n    }\n    sum = 0;\n    for (var index = 0; index < 10; index++) {\n        sum += parseInt(account.charAt(index), 10) * weightsAccount[index];\n    }\n    remainder = sum % 11;\n    return controlAccount === (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder);\n};\n/**\n * Mod 11/10 check\n *\n * @ignore\n */\nvar checkMod1110 = function (toCheck, control) {\n    var nr = 10;\n    for (var index = 0; index < toCheck.length; index++) {\n        nr += parseInt(toCheck.charAt(index), 10);\n        if (nr % 10 !== 0) {\n            nr = nr % 10;\n        }\n        nr = nr * 2;\n        nr = nr % 11;\n    }\n    return control === (11 - nr === 10 ? 0 : 11 - nr);\n};\n/**\n * Croatian (HR) BBAN check\n *\n * @ignore\n */\nvar checkCroatianBBAN = function (bban) {\n    var controlBankBranch = parseInt(bban.charAt(6), 10);\n    var controlAccount = parseInt(bban.charAt(16), 10);\n    var bankBranch = bban.substring(0, 6);\n    var account = bban.substring(7, 16);\n    return checkMod1110(bankBranch, controlBankBranch) && checkMod1110(account, controlAccount);\n};\n/**\n * Czech (CZ) and Slowak (SK) BBAN check\n *\n * @ignore\n */\nvar checkCzechAndSlovakBBAN = function (bban) {\n    var weightsPrefix = [10, 5, 8, 4, 2, 1];\n    var weightsSuffix = [6, 3, 7, 9, 10, 5, 8, 4, 2, 1];\n    var controlPrefix = parseInt(bban.charAt(9), 10);\n    var controlSuffix = parseInt(bban.charAt(19), 10);\n    var prefix = bban.substring(4, 9);\n    var suffix = bban.substring(10, 19);\n    var sum = 0;\n    for (var index = 0; index < prefix.length; index++) {\n        sum += parseInt(prefix.charAt(index), 10) * weightsPrefix[index];\n    }\n    var remainder = sum % 11;\n    if (controlPrefix !== (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder)) {\n        return false;\n    }\n    sum = 0;\n    for (var index = 0; index < suffix.length; index++) {\n        sum += parseInt(suffix.charAt(index), 10) * weightsSuffix[index];\n    }\n    remainder = sum % 11;\n    return controlSuffix === (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder);\n};\n/**\n * Estonian (EE) BBAN check\n *\n * @ignore\n */\nvar checkEstonianBBAN = function (bban) {\n    var weights = [7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7];\n    var controlDigit = parseInt(bban.charAt(15), 10);\n    var toCheck = bban.substring(2, 15);\n    var sum = 0;\n    for (var index = 0; index < toCheck.length; index++) {\n        sum += parseInt(toCheck.charAt(index), 10) * weights[index];\n    }\n    var remainder = sum % 10;\n    return controlDigit === (remainder === 0 ? 0 : 10 - remainder);\n};\n/**\n * Check French (FR) BBAN\n * Also for Monaco (MC)\n *\n * @ignore\n */\nvar checkFrenchBBAN = function (bban) {\n    var stripped = bban.replace(/[\\s.]+/g, '');\n    var normalized = Array.from(stripped);\n    for (var index = 0; index < stripped.length; index++) {\n        var c = normalized[index].charCodeAt(0);\n        if (c >= 65) {\n            switch (c) {\n                case 65:\n                case 74:\n                    normalized[index] = '1';\n                    break;\n                case 66:\n                case 75:\n                case 83:\n                    normalized[index] = '2';\n                    break;\n                case 67:\n                case 76:\n                case 84:\n                    normalized[index] = '3';\n                    break;\n                case 68:\n                case 77:\n                case 85:\n                    normalized[index] = '4';\n                    break;\n                case 69:\n                case 78:\n                case 86:\n                    normalized[index] = '5';\n                    break;\n                case 70:\n                case 79:\n                case 87:\n                    normalized[index] = '6';\n                    break;\n                case 71:\n                case 80:\n                case 88:\n                    normalized[index] = '7';\n                    break;\n                case 72:\n                case 81:\n                case 89:\n                    normalized[index] = '8';\n                    break;\n                case 73:\n                case 82:\n                case 90:\n                    normalized[index] = '9';\n                    break;\n            }\n        }\n    }\n    var remainder = mod9710(normalized.join(''));\n    return remainder === 0;\n};\n/**\n * Hungarian (HU) BBAN check\n *\n * @ignore\n */\nvar checkHungarianBBAN = function (bban) {\n    var weights = [9, 7, 3, 1, 9, 7, 3, 1, 9, 7, 3, 1, 9, 7, 3];\n    var controlDigitBankBranch = parseInt(bban.charAt(7), 10);\n    var toCheckBankBranch = bban.substring(0, 7);\n    var sum = 0;\n    for (var index = 0; index < toCheckBankBranch.length; index++) {\n        sum += parseInt(toCheckBankBranch.charAt(index), 10) * weights[index];\n    }\n    var remainder = sum % 10;\n    if (controlDigitBankBranch !== (remainder === 0 ? 0 : 10 - remainder)) {\n        return false;\n    }\n    sum = 0;\n    if (bban.endsWith('00000000')) {\n        var toCheckAccount = bban.substring(8, 15);\n        var controlDigitAccount = parseInt(bban.charAt(15), 10);\n        for (var index = 0; index < toCheckAccount.length; index++) {\n            sum += parseInt(toCheckAccount.charAt(index), 10) * weights[index];\n        }\n        var remainder_1 = sum % 10;\n        return controlDigitAccount === (remainder_1 === 0 ? 0 : 10 - remainder_1);\n    }\n    else {\n        var toCheckAccount = bban.substring(8, 23);\n        var controlDigitAccount = parseInt(bban.charAt(23), 10);\n        for (var index = 0; index < toCheckAccount.length; index++) {\n            sum += parseInt(toCheckAccount.charAt(index), 10) * weights[index];\n        }\n        var remainder_2 = sum % 10;\n        return controlDigitAccount === (remainder_2 === 0 ? 0 : 10 - remainder_2);\n    }\n};\n/**\n * Set custom BBAN validation function for country.\n *\n * If `bban_validation_func` already exists for the corresponding country,\n * it will be overwritten.\n */\nexport var setCountryBBANValidation = function (country, func) {\n    if (typeof countrySpecs[country] === 'undefined') {\n        return false;\n    }\n    countrySpecs[country].bban_validation_func = func;\n    return true;\n};\n/**\n * Country specifications\n */\nexport var countrySpecs = {\n    AD: {\n        chars: 24,\n        bban_regexp: '^[0-9]{8}[A-Z0-9]{12}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-7',\n        bank_identifier: '0-3',\n        account_indentifier: '8-24',\n    },\n    AE: {\n        chars: 23,\n        bban_regexp: '^[0-9]{3}[0-9]{16}$',\n        IBANRegistry: true,\n        bank_identifier: '0-2',\n        account_indentifier: '7-23',\n    },\n    AF: {},\n    AG: {},\n    AI: {},\n    AL: {\n        chars: 28,\n        bban_regexp: '^[0-9]{8}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        branch_indentifier: '3-7',\n        bank_identifier: '0-2',\n        account_indentifier: '12-28',\n    },\n    AM: {},\n    AO: {\n        chars: 25,\n        bban_regexp: '^[0-9]{21}$',\n    },\n    AQ: {},\n    AR: {},\n    AS: {},\n    AT: { chars: 20, bban_regexp: '^[0-9]{16}$', IBANRegistry: true, SEPA: true, bank_identifier: '0-4' },\n    AU: {},\n    AW: {},\n    AX: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n    },\n    AZ: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{20}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '4-28',\n    },\n    BA: {\n        chars: 20,\n        bban_regexp: '^[0-9]{16}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        branch_indentifier: '3-5',\n        bank_identifier: '0-2',\n    },\n    BB: {},\n    BD: {},\n    BE: {\n        chars: 16,\n        bban_regexp: '^[0-9]{12}$',\n        bban_validation_func: checkBelgianBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-2',\n        account_indentifier: '0-16',\n    },\n    BF: {\n        chars: 28,\n        bban_regexp: '^[A-Z0-9]{2}[0-9]{22}$',\n    },\n    BG: {\n        chars: 22,\n        bban_regexp: '^[A-Z]{4}[0-9]{6}[A-Z0-9]{8}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-7',\n        bank_identifier: '0-3',\n    },\n    BH: {\n        chars: 22,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{14}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-22',\n    },\n    BI: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n        branch_indentifier: '5-9',\n        bank_identifier: '0-4',\n        account_indentifier: '14-27',\n    },\n    BJ: {\n        chars: 28,\n        bban_regexp: '^[A-Z0-9]{2}[0-9]{22}$',\n    },\n    BL: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n    },\n    BM: {},\n    BN: {},\n    BO: {},\n    BQ: {},\n    BR: {\n        chars: 29,\n        bban_regexp: '^[0-9]{23}[A-Z]{1}[A-Z0-9]{1}$',\n        IBANRegistry: true,\n        branch_indentifier: '8-12',\n        bank_identifier: '0-7',\n        account_indentifier: '17-29',\n    },\n    BS: {},\n    BT: {},\n    BV: {},\n    BW: {},\n    BY: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[0-9]{4}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n    },\n    BZ: {},\n    CA: {},\n    CC: {},\n    CD: {},\n    CF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    CG: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    CH: {\n        chars: 21,\n        bban_regexp: '^[0-9]{5}[A-Z0-9]{12}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-4',\n    },\n    CI: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{1}[0-9]{23}$',\n    },\n    CK: {},\n    CL: {},\n    CM: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    CN: {},\n    CO: {},\n    CR: {\n        chars: 22,\n        bban_regexp: '^[0-9]{18}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-22',\n    },\n    CU: {},\n    CV: { chars: 25, bban_regexp: '^[0-9]{21}$' },\n    CW: {},\n    CX: {},\n    CY: {\n        chars: 28,\n        bban_regexp: '^[0-9]{8}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '3-7',\n        bank_identifier: '0-2',\n        account_indentifier: '12-28',\n    },\n    CZ: {\n        chars: 24,\n        bban_regexp: '^[0-9]{20}$',\n        bban_validation_func: checkCzechAndSlovakBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n    },\n    DE: {\n        chars: 22,\n        bban_regexp: '^[0-9]{18}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-7',\n        account_indentifier: '13-22',\n    },\n    DJ: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n        branch_indentifier: '5-9',\n        bank_identifier: '0-4',\n        account_indentifier: '14-27',\n    },\n    DK: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '4-18',\n    },\n    DM: {},\n    DO: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[0-9]{20}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-28',\n    },\n    DZ: {\n        chars: 26,\n        bban_regexp: '^[0-9]{22}$',\n    },\n    EC: {},\n    EE: {\n        chars: 20,\n        bban_regexp: '^[0-9]{16}$',\n        bban_validation_func: checkEstonianBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-1',\n        account_indentifier: '8-20',\n    },\n    EG: {\n        chars: 29,\n        bban_regexp: '^[0-9]{25}',\n        IBANRegistry: true,\n        branch_indentifier: '4-7',\n        bank_identifier: '0-3',\n        account_indentifier: '17-29',\n    },\n    EH: {},\n    ER: {},\n    ES: {\n        chars: 24,\n        bban_validation_func: checkSpainBBAN,\n        bban_regexp: '^[0-9]{20}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-7',\n        bank_identifier: '0-3',\n        account_indentifier: '14-24',\n    },\n    ET: {},\n    FI: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-2',\n        account_indentifier: '0-0',\n    },\n    FJ: {},\n    FK: {\n        chars: 18,\n        bban_regexp: '^[A-Z]{2}[0-9]{12}$',\n        bank_identifier: '0-1',\n        account_indentifier: '6-18',\n    },\n    FM: {},\n    FO: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '4-18',\n    },\n    FR: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        bban_validation_func: checkFrenchBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-4',\n        branch_indentifier: '5-9',\n        account_indentifier: '14-24',\n    },\n    GA: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    GB: {\n        chars: 22,\n        bban_regexp: '^[A-Z]{4}[0-9]{14}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-9',\n        bank_identifier: '0-3',\n    },\n    GD: {},\n    GE: {\n        chars: 22,\n        bban_regexp: '^[A-Z0-9]{2}[0-9]{16}$',\n        IBANRegistry: true,\n        bank_identifier: '0-1',\n        account_indentifier: '6-22',\n    },\n    GF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    GG: {},\n    GH: {},\n    GI: {\n        chars: 23,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{15}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-23',\n    },\n    GL: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '4-18',\n    },\n    GM: {},\n    GN: {},\n    GP: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    GQ: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    GR: {\n        chars: 27,\n        bban_regexp: '^[0-9]{7}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '3-6',\n        bank_identifier: '0-2',\n        account_indentifier: '7-27',\n    },\n    GS: {},\n    GT: {\n        chars: 28,\n        bban_regexp: '^[A-Z0-9]{24}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-28',\n    },\n    GU: {},\n    GW: {\n        chars: 25,\n        bban_regexp: '^[A-Z]{2}[0-9]{19}$',\n    },\n    GY: {},\n    HK: {},\n    HM: {},\n    HN: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[0-9]{20}$',\n    },\n    HR: {\n        chars: 21,\n        bban_regexp: '^[0-9]{17}$',\n        bban_validation_func: checkCroatianBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-6',\n    },\n    HT: {},\n    HU: {\n        chars: 28,\n        bban_regexp: '^[0-9]{24}$',\n        bban_validation_func: checkHungarianBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '3-6',\n        bank_identifier: '0-2',\n    },\n    ID: {},\n    IE: {\n        chars: 22,\n        bban_regexp: '^[A-Z0-9]{4}[0-9]{14}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-9',\n        bank_identifier: '0-3',\n    },\n    IL: {\n        chars: 23,\n        bban_regexp: '^[0-9]{19}$',\n        IBANRegistry: true,\n        branch_indentifier: '3-5',\n        bank_identifier: '0-2',\n    },\n    IM: {},\n    IN: {},\n    IO: {},\n    IQ: {\n        chars: 23,\n        bban_regexp: '^[A-Z]{4}[0-9]{15}$',\n        IBANRegistry: true,\n        branch_indentifier: '4-6',\n        bank_identifier: '0-3',\n        account_indentifier: '11-23',\n    },\n    IR: {\n        chars: 26,\n        bban_regexp: '^[0-9]{22}$',\n    },\n    IS: {\n        chars: 26,\n        bban_regexp: '^[0-9]{22}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '2-3',\n        bank_identifier: '0-1',\n    },\n    IT: {\n        chars: 27,\n        bban_regexp: '^[A-Z]{1}[0-9]{10}[A-Z0-9]{12}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '6-10',\n        bank_identifier: '1-5',\n        account_indentifier: '4-27',\n    },\n    JE: {},\n    JM: {},\n    JO: {\n        chars: 30,\n        bban_regexp: '^[A-Z]{4}[0-9]{4}[A-Z0-9]{18}$',\n        IBANRegistry: true,\n        branch_indentifier: '4-7',\n        bank_identifier: '4-7',\n    },\n    JP: {},\n    KE: {},\n    KG: {},\n    KH: {},\n    KI: {},\n    KM: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    KN: {},\n    KP: {},\n    KR: {},\n    KW: {\n        chars: 30,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{22}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '20-30',\n    },\n    KY: {},\n    KZ: {\n        chars: 20,\n        bban_regexp: '^[0-9]{3}[A-Z0-9]{13}$',\n        IBANRegistry: true,\n        bank_identifier: '0-2',\n        account_indentifier: '0-20',\n    },\n    LA: {},\n    LB: {\n        chars: 28,\n        bban_regexp: '^[0-9]{4}[A-Z0-9]{20}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '14-28',\n    },\n    LC: {\n        chars: 32,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{24}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-32',\n    },\n    LI: {\n        chars: 21,\n        bban_regexp: '^[0-9]{5}[A-Z0-9]{12}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-4',\n    },\n    LK: {},\n    LR: {},\n    LS: {},\n    LT: { chars: 20, bban_regexp: '^[0-9]{16}$', IBANRegistry: true, SEPA: true, bank_identifier: '0-4' },\n    LU: {\n        chars: 20,\n        bban_regexp: '^[0-9]{3}[A-Z0-9]{13}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-2',\n    },\n    LV: {\n        chars: 21,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{13}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '0-21',\n    },\n    LY: {\n        chars: 25,\n        bban_regexp: '^[0-9]{21}$',\n        IBANRegistry: true,\n        branch_indentifier: '3-5',\n        bank_identifier: '0-2',\n        account_indentifier: '10-25',\n    },\n    MA: {\n        chars: 28,\n        bban_regexp: '^[0-9]{24}$',\n    },\n    MC: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        bban_validation_func: checkFrenchBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '5-9',\n        bank_identifier: '0-4',\n    },\n    MD: {\n        chars: 24,\n        bban_regexp: '^[A-Z0-9]{2}[A-Z0-9]{18}$',\n        IBANRegistry: true,\n        bank_identifier: '0-1',\n        account_indentifier: '6-24',\n    },\n    ME: {\n        chars: 22,\n        bban_regexp: '^[0-9]{18}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        bank_identifier: '0-2',\n        account_indentifier: '4-22',\n    },\n    MF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    MG: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    MH: {},\n    MK: {\n        chars: 19,\n        bban_regexp: '^[0-9]{3}[A-Z0-9]{10}[0-9]{2}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        bank_identifier: '0-2',\n    },\n    ML: {\n        chars: 28,\n        bban_regexp: '^[A-Z0-9]{2}[0-9]{22}$',\n    },\n    MM: {},\n    MN: {\n        chars: 20,\n        bban_regexp: '^[0-9]{16}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-20',\n    },\n    MO: {},\n    MP: {},\n    MQ: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    MR: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n        IBANRegistry: true,\n        branch_indentifier: '5-9',\n        bank_identifier: '0-4',\n        account_indentifier: '4-27',\n    },\n    MS: {},\n    MT: {\n        chars: 31,\n        bban_regexp: '^[A-Z]{4}[0-9]{5}[A-Z0-9]{18}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '4-8',\n        bank_identifier: '0-3',\n        account_indentifier: '15-31',\n    },\n    MU: {\n        chars: 30,\n        bban_regexp: '^[A-Z]{4}[0-9]{19}[A-Z]{3}$',\n        IBANRegistry: true,\n        branch_indentifier: '6-7',\n        bank_identifier: '0-5',\n        account_indentifier: '0-30',\n    },\n    MV: {},\n    MW: {},\n    MX: {},\n    MY: {},\n    MZ: {\n        chars: 25,\n        bban_regexp: '^[0-9]{21}$',\n    },\n    NA: {},\n    NC: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    NE: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{2}[0-9]{22}$',\n    },\n    NF: {},\n    NG: {},\n    NI: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[0-9]{20}$',\n        bank_identifier: '0-3',\n        IBANRegistry: true,\n        account_indentifier: '8-28',\n    },\n    NL: {\n        chars: 18,\n        bban_regexp: '^[A-Z]{4}[0-9]{10}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-18',\n    },\n    NO: {\n        chars: 15,\n        bban_regexp: '^[0-9]{11}$',\n        bban_validation_func: checkNorwayBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '4-15',\n    },\n    NP: {},\n    NR: {},\n    NU: {},\n    NZ: {},\n    OM: {\n        chars: 23,\n        bban_regexp: '^[0-9]{3}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        SEPA: false,\n        bank_identifier: '0-2',\n    },\n    PA: {},\n    PE: {},\n    PF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    PG: {},\n    PH: {},\n    PK: {\n        chars: 24,\n        bban_regexp: '^[A-Z0-9]{4}[0-9]{16}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n    },\n    PL: {\n        chars: 28,\n        bban_validation_func: checkPolandBBAN,\n        bban_regexp: '^[0-9]{24}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '0-7',\n        account_indentifier: '2-28',\n    },\n    PM: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    PN: {},\n    PR: {},\n    PS: {\n        chars: 29,\n        bban_regexp: '^[A-Z0-9]{4}[0-9]{21}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '17-29',\n    },\n    PT: {\n        chars: 25,\n        bban_regexp: '^[0-9]{21}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n    },\n    PW: {},\n    PY: {},\n    QA: {\n        chars: 29,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{21}$',\n        IBANRegistry: true,\n        bank_identifier: '0-3',\n        account_indentifier: '8-29',\n    },\n    RE: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    RO: {\n        chars: 24,\n        bban_regexp: '^[A-Z]{4}[A-Z0-9]{16}$',\n        IBANRegistry: true,\n        SEPA: true,\n        bank_identifier: '0-3',\n        account_indentifier: '0-24',\n    },\n    RS: {\n        chars: 22,\n        bban_regexp: '^[0-9]{18}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        bank_identifier: '0-2',\n    },\n    RU: {\n        chars: 33,\n        bban_regexp: '^[0-9]{14}[A-Z0-9]{15}$',\n        IBANRegistry: true,\n        branch_indentifier: '9-13',\n        bank_identifier: '0-8',\n        account_indentifier: '13-33',\n    },\n    RW: {},\n    SA: {\n        chars: 24,\n        bban_regexp: '^[0-9]{2}[A-Z0-9]{18}$',\n        IBANRegistry: true,\n        bank_identifier: '0-1',\n        account_indentifier: '12-24',\n    },\n    SB: {},\n    SC: {\n        chars: 31,\n        bban_regexp: '^[A-Z]{4}[0-9]{20}[A-Z]{3}$',\n        IBANRegistry: true,\n        branch_indentifier: '6-7',\n        bank_identifier: '0-5',\n        account_indentifier: '12-28',\n    },\n    SD: {\n        chars: 18,\n        bban_regexp: '^[0-9]{14}$',\n        IBANRegistry: true,\n        bank_identifier: '0-1',\n        account_indentifier: '6-18',\n    },\n    SE: { chars: 24, bban_regexp: '^[0-9]{20}$', IBANRegistry: true, SEPA: true, bank_identifier: '0-2' },\n    SG: {},\n    SH: {},\n    SI: {\n        chars: 19,\n        bban_regexp: '^[0-9]{15}$',\n        bban_validation_func: checkMod9710BBAN,\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '2-4',\n        bank_identifier: '0-1',\n        account_indentifier: '9-16',\n    },\n    SJ: {},\n    SK: {\n        chars: 24,\n        bban_regexp: '^[0-9]{20}$',\n        bban_validation_func: checkCzechAndSlovakBBAN,\n        IBANRegistry: true,\n        SEPA: true,\n    },\n    SL: {},\n    SM: {\n        chars: 27,\n        bban_regexp: '^[A-Z]{1}[0-9]{10}[A-Z0-9]{12}$',\n        IBANRegistry: true,\n        SEPA: true,\n        branch_indentifier: '6-10',\n    },\n    SN: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{2}[0-9]{22}$',\n    },\n    SO: {\n        chars: 23,\n        bban_regexp: '^[0-9]{19}$',\n        IBANRegistry: true,\n        branch_indentifier: '4-6',\n        account_indentifier: '11-23',\n    },\n    SR: {},\n    SS: {},\n    ST: {\n        chars: 25,\n        bban_regexp: '^[0-9]{21}$',\n        IBANRegistry: true,\n        branch_indentifier: '4-7',\n    },\n    SV: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{4}[0-9]{20}$',\n        IBANRegistry: true,\n        account_indentifier: '8-28',\n    },\n    SX: {},\n    SY: {},\n    SZ: {},\n    TC: {},\n    TD: {\n        chars: 27,\n        bban_regexp: '^[0-9]{23}$',\n    },\n    TF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    TG: {\n        chars: 28,\n        bban_regexp: '^[A-Z]{2}[0-9]{22}$',\n    },\n    TH: {},\n    TJ: {},\n    TK: {},\n    TL: {\n        chars: 23,\n        bban_regexp: '^[0-9]{19}$',\n        IBANRegistry: true,\n        account_indentifier: '4-23',\n    },\n    TM: {},\n    TN: {\n        chars: 24,\n        bban_regexp: '^[0-9]{20}$',\n        IBANRegistry: true,\n        branch_indentifier: '2-4',\n        account_indentifier: '4-24',\n    },\n    TO: {},\n    TR: {\n        chars: 26,\n        bban_regexp: '^[0-9]{5}[A-Z0-9]{17}$',\n        IBANRegistry: true,\n    },\n    TT: {},\n    TV: {},\n    TW: {},\n    TZ: {},\n    UA: {\n        chars: 29,\n        bban_regexp: '^[0-9]{6}[A-Z0-9]{19}$',\n        IBANRegistry: true,\n        account_indentifier: '15-29',\n    },\n    UG: {},\n    UM: {},\n    US: {},\n    UY: {},\n    UZ: {},\n    VA: {\n        chars: 22,\n        bban_regexp: '^[0-9]{18}',\n        IBANRegistry: true,\n        SEPA: true,\n        account_indentifier: '7-22',\n    },\n    VC: {},\n    VE: {},\n    VG: {\n        chars: 24,\n        bban_regexp: '^[A-Z0-9]{4}[0-9]{16}$',\n        IBANRegistry: true,\n        account_indentifier: '8-24',\n    },\n    VI: {},\n    VN: {},\n    VU: {},\n    WF: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    WS: {},\n    XK: {\n        chars: 20,\n        bban_regexp: '^[0-9]{16}$',\n        IBANRegistry: true,\n        branch_indentifier: '2-3',\n        account_indentifier: '4-20',\n    },\n    YE: {},\n    YT: {\n        chars: 27,\n        bban_regexp: '^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$',\n        IBANRegistry: true,\n    },\n    ZA: {},\n    ZM: {},\n    ZW: {},\n};\n"],
  "mappings": ";AAsCO,SAAS,YAAY,MAAM,mBAAmB;AACjD,MAAI,sBAAsB,QAAQ;AAAE,wBAAoB,EAAE,aAAa,KAAK;AAAA,EAAG;AAC/E,MAAI,SAAS,UAAa,SAAS;AAC/B,WAAO;AACX,MAAI,MAAM,IAAI,OAAO,cAAc,EAAE;AACrC,MAAI,cAAc,KAAK,MAAM,GAAG,CAAC;AACjC,MAAI,OAAO,aAAa,WAAW;AACnC,MAAI,SAAS,UAAa,KAAK,gBAAgB,UAAa,KAAK,gBAAgB,QAAQ,KAAK,UAAU;AACpG,WAAO;AACX,SAAQ,KAAK,UAAU,KAAK,UACxB,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,CAAC,KACzB,YAAY,KAAK,MAAM,CAAC,GAAG,WAAW,KACtC,oBAAoB,IAAI,MACvB,kBAAkB,eAAe,CAAC,SAAS,IAAI;AACxD;AAIO,IAAI;AAAA,CACV,SAAUA,uBAAsB;AAC7B,EAAAA,sBAAqBA,sBAAqB,gBAAgB,IAAI,CAAC,IAAI;AACnE,EAAAA,sBAAqBA,sBAAqB,eAAe,IAAI,CAAC,IAAI;AAClE,EAAAA,sBAAqBA,sBAAqB,iBAAiB,IAAI,CAAC,IAAI;AACpE,EAAAA,sBAAqBA,sBAAqB,iBAAiB,IAAI,CAAC,IAAI;AACpE,EAAAA,sBAAqBA,sBAAqB,mBAAmB,IAAI,CAAC,IAAI;AACtE,EAAAA,sBAAqBA,sBAAqB,mBAAmB,IAAI,CAAC,IAAI;AACtE,EAAAA,sBAAqBA,sBAAqB,gCAAgC,IAAI,CAAC,IAAI;AACnF,EAAAA,sBAAqBA,sBAAqB,kBAAkB,IAAI,CAAC,IAAI;AACzE,GAAG,yBAAyB,uBAAuB,CAAC,EAAE;AAiB/C,SAAS,aAAa,MAAM,mBAAmB;AAClD,MAAI,sBAAsB,QAAQ;AAAE,wBAAoB,EAAE,aAAa,KAAK;AAAA,EAAG;AAC/E,MAAI,SAAS,EAAE,YAAY,CAAC,GAAG,OAAO,KAAK;AAC3C,MAAI,SAAS,UAAa,SAAS,QAAQ,SAAS,IAAI;AACpD,QAAI,OAAO,aAAa,KAAK,MAAM,GAAG,CAAC,CAAC;AACxC,QAAI,CAAC,QAAQ,EAAE,KAAK,eAAe,KAAK,QAAQ;AAC5C,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,aAAa;AACzD,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,KAAK,QAAQ;AAClD,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,eAAe;AAAA,IAC/D;AACA,QAAI,QAAQ,KAAK,eAAe,CAAC,gBAAgB,KAAK,MAAM,CAAC,GAAG,KAAK,WAAW,GAAG;AAC/E,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,eAAe;AAAA,IAC/D;AACA,QAAI,QAAQ,KAAK,wBAAwB,CAAC,KAAK,qBAAqB,KAAK,MAAM,CAAC,CAAC,GAAG;AAChF,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,8BAA8B;AAAA,IAC9E;AACA,QAAI,MAAM,IAAI,OAAO,cAAc,EAAE;AACrC,QAAI,CAAC,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG;AAC7B,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,iBAAiB;AAAA,IACjE;AACA,QAAI,OAAO,WAAW,QAAQ,qBAAqB,eAAe,MAAM,MAAM,CAAC,oBAAoB,IAAI,GAAG;AACtG,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,iBAAiB;AAAA,IACjE;AACA,QAAI,CAAC,kBAAkB,eAAe,SAAS,IAAI,GAAG;AAClD,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,qBAAqB,gBAAgB;AAAA,IAChE;AAAA,EACJ,OACK;AACD,WAAO,QAAQ;AACf,WAAO,WAAW,KAAK,qBAAqB,cAAc;AAAA,EAC9D;AACA,SAAO;AACX;AAaO,SAAS,YAAY,MAAM,aAAa;AAC3C,MAAI,SAAS,UAAa,SAAS,QAAQ,gBAAgB,UAAa,gBAAgB;AACpF,WAAO;AACX,MAAI,OAAO,aAAa,WAAW;AACnC,MAAI,SAAS,UACT,SAAS,QACT,KAAK,gBAAgB,UACrB,KAAK,gBAAgB,QACrB,KAAK,UAAU,UACf,KAAK,UAAU;AACf,WAAO;AACX,MAAI,KAAK,QAAQ,MAAM,KAAK,UAAU,gBAAgB,MAAM,KAAK,WAAW,GAAG;AAC3E,QAAI,KAAK,sBAAsB;AAC3B,aAAO,KAAK,qBAAqB,KAAK,QAAQ,WAAW,EAAE,CAAC;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAYO,SAAS,cAAc,aAAa;AACvC,MAAI,gBAAgB,UAAa,gBAAgB,MAAM;AACnD,QAAI,OAAO,aAAa,WAAW;AACnC,QAAI,SAAS,QAAW;AACpB,aAAO,KAAK,OAAO,KAAK,OAAO;AAAA,IACnC;AAAA,EACJ;AACA,SAAO;AACX;AAYO,SAAS,SAAS,MAAM;AAC3B,MAAI,SAAS,UAAa,SAAS;AAC/B,WAAO;AACX,MAAI,cAAc,KAAK,MAAM,GAAG,CAAC;AACjC,MAAI,kBAAkB,CAAC,MAAM,IAAI;AACjC,MAAI,CAAC,gBAAgB,SAAS,WAAW;AACrC,WAAO;AACX,MAAI,MAAM,IAAI,OAAO,uBAAuB,EAAE;AAC9C,SAAO,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,CAAC;AACpC;AASO,SAAS,YAAY,QAAQ;AAChC,MAAI,gBAAgB,qBAAqB,OAAO,IAAI,KAAK;AACzD,MAAI,OAAO,gBAAgB,QAAQ,OAAO,gBAAgB,QAAW;AACjE,WAAO;AAAA,EACX;AACA,MAAI,OAAO,aAAa,OAAO,WAAW;AAC1C,MAAI,kBAAkB,MAClB,SAAS,UACT,KAAK,SACL,KAAK,UAAU,QACf,KAAK,UAAU,cAAc,SAAS,KACtC,KAAK,eACL,KAAK,gBAAgB,QACrB,gBAAgB,eAAe,KAAK,WAAW,GAAG;AAClD,QAAI,WAAW,YAAY,OAAO,cAAc,OAAO,aAAa;AACpE,WAAO,OAAO,eAAe,OAAO,KAAK,WAAW,MAAM,EAAE,IAAI;AAAA,EACpE;AACA,SAAO;AACX;AAQO,SAAS,YAAY,MAAM;AAC9B,MAAI,SAAS,CAAC;AACd,MAAI,cAAc,qBAAqB,IAAI;AAC3C,SAAO,OAAO,eAAe;AAC7B,MAAI,CAAC,CAAC,eAAe,YAAY,WAAW,GAAG;AAC3C,WAAO,OAAO,YAAY,MAAM,CAAC;AACjC,WAAO,cAAc,YAAY,MAAM,GAAG,CAAC;AAC3C,WAAO,QAAQ;AACf,QAAI,OAAO,aAAa,OAAO,WAAW;AAC1C,QAAI,KAAK,qBAAqB;AAC1B,UAAI,KAAK,KAAK,oBAAoB,MAAM,GAAG;AAC3C,UAAI,WAAW,SAAS,GAAG,CAAC,CAAC;AAC7B,UAAI,SAAS,SAAS,GAAG,CAAC,CAAC;AAC3B,aAAO,gBAAgB,OAAO,KAAK,MAAM,UAAU,SAAS,CAAC;AAAA,IACjE;AACA,QAAI,KAAK,iBAAiB;AACtB,UAAI,KAAK,KAAK,gBAAgB,MAAM,GAAG;AACvC,UAAI,WAAW,SAAS,GAAG,CAAC,CAAC;AAC7B,UAAI,SAAS,SAAS,GAAG,CAAC,CAAC;AAC3B,aAAO,iBAAiB,OAAO,KAAK,MAAM,UAAU,SAAS,CAAC;AAAA,IAClE;AACA,QAAI,KAAK,oBAAoB;AACzB,UAAI,KAAK,KAAK,mBAAmB,MAAM,GAAG;AAC1C,UAAI,WAAW,SAAS,GAAG,CAAC,CAAC;AAC7B,UAAI,SAAS,SAAS,GAAG,CAAC,CAAC;AAC3B,aAAO,mBAAmB,OAAO,KAAK,MAAM,UAAU,SAAS,CAAC;AAAA,IACpE;AAAA,EACJ,OACK;AACD,WAAO,QAAQ;AAAA,EACnB;AACA,SAAO;AACX;AAMA,SAAS,gBAAgB,MAAM,SAAS;AACpC,MAAI,MAAM,IAAI,OAAO,SAAS,EAAE;AAChC,SAAO,IAAI,KAAK,IAAI;AACxB;AAUO,SAAS,qBAAqB,MAAM;AACvC,MAAI,OAAO,SAAS,UAAU;AAC1B,WAAO;AAAA,EACX;AACA,SAAO,KAAK,QAAQ,UAAU,EAAE,EAAE,YAAY;AAClD;AAcO,SAAS,mBAAmB,MAAM,WAAW;AAChD,MAAI,OAAO,SAAS,UAAU;AAC1B,WAAO;AAAA,EACX;AACA,MAAI,cAAc,UAAa,cAAc,MAAM;AAC/C,gBAAY;AAAA,EAChB;AACA,MAAI,kBAAkB,qBAAqB,IAAI;AAE/C,MAAI,oBAAoB,MAAM;AAC1B,WAAO;AAAA,EACX;AACA,SAAO,gBAAgB,QAAQ,gBAAgB,OAAO,SAAS;AACnE;AAMA,SAAS,oBAAoB,MAAM;AAC/B,MAAI,cAAc,KAAK,MAAM,GAAG,CAAC;AACjC,MAAI,mBAAmB,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE;AACpD,MAAI,OAAO,KAAK,MAAM,CAAC;AAkBvB,MAAI,mBAAmB,wBAAwB,GAAG,OAAO,IAAI,EAAE,OAAO,aAAa,IAAI,CAAC;AACxF,MAAI,OAAO,QAAQ,gBAAgB;AACnC,SAAO,KAAK,SAAS;AACzB;AAOA,SAAS,wBAAwB,KAAK;AAGlC,SAAO,IACF,MAAM,EAAE,EACR,IAAI,SAAU,GAAG;AAClB,QAAI,OAAO,EAAE,WAAW,CAAC;AACzB,WAAO,QAAQ,MAAM,OAAO,IAAI,SAAS,IAAI;AAAA,EACjD,CAAC,EACI,KAAK,EAAE;AAChB;AAMA,SAAS,YAAY,MAAM;AACvB,SAAO,QAAQ,wBAAwB,KAAK,MAAM,CAAC,IAAI,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC;AAC5E;AAuBO,SAAS,2BAA2B;AACvC,MAAI,YAAY,CAAC;AACjB,WAAS,cAAc,cAAc;AACjC,QAAI,SAAS,aAAa,UAAU;AACpC,cAAU,UAAU,IAAI;AAAA,MACpB,OAAO,OAAO,SAAS;AAAA,MACvB,aAAa,OAAO,eAAe;AAAA,MACnC,cAAc,OAAO,gBAAgB;AAAA,MACrC,MAAM,OAAO,QAAQ;AAAA,IACzB;AAAA,EACJ;AACA,SAAO;AACX;AAkBO,SAAS,WAAW,KAAK;AAC5B,MAAI,CAAC,KAAK;AACN,WAAO;AAAA,EACX;AACA,MAAI,MAAM,IAAI,OAAO,gDAAgD,EAAE;AACvE,MAAI,OAAO,aAAa,IAAI,YAAY,EAAE,MAAM,GAAG,CAAC,CAAC;AACrD,SAAO,IAAI,KAAK,GAAG,KAAK,SAAS;AACrC;AAIO,IAAI;AAAA,CACV,SAAUC,sBAAqB;AAC5B,EAAAA,qBAAoBA,qBAAoB,eAAe,IAAI,CAAC,IAAI;AAChE,EAAAA,qBAAoBA,qBAAoB,cAAc,IAAI,CAAC,IAAI;AAC/D,EAAAA,qBAAoBA,qBAAoB,gBAAgB,IAAI,CAAC,IAAI;AACrE,GAAG,wBAAwB,sBAAsB,CAAC,EAAE;AAQ7C,SAAS,YAAY,KAAK;AAC7B,MAAI,SAAS,EAAE,YAAY,CAAC,GAAG,OAAO,KAAK;AAC3C,MAAI,QAAQ,UAAa,QAAQ,QAAQ,QAAQ,IAAI;AACjD,QAAI,OAAO,aAAa,IAAI,YAAY,EAAE,MAAM,GAAG,CAAC,CAAC;AACrD,QAAI,SAAS,QAAW;AACpB,aAAO,QAAQ;AACf,aAAO,WAAW,KAAK,oBAAoB,YAAY;AAAA,IAC3D,OACK;AACD,UAAI,MAAM,IAAI,OAAO,gDAAgD,EAAE;AACvE,UAAI,CAAC,IAAI,KAAK,GAAG,GAAG;AAChB,eAAO,QAAQ;AACf,eAAO,WAAW,KAAK,oBAAoB,cAAc;AAAA,MAC7D;AAAA,IACJ;AAAA,EACJ,OACK;AACD,WAAO,QAAQ;AACf,WAAO,WAAW,KAAK,oBAAoB,aAAa;AAAA,EAC5D;AACA,SAAO;AACX;AAQO,SAAS,WAAW,UAAU;AACjC,MAAI,SAAS,CAAC;AACd,MAAI,MAAM,SAAS,YAAY;AAC/B,MAAI,WAAW,GAAG,GAAG;AACjB,WAAO,WAAW,IAAI,MAAM,GAAG,CAAC;AAChC,WAAO,cAAc,IAAI,MAAM,GAAG,CAAC;AACnC,WAAO,eAAe,IAAI,MAAM,GAAG,CAAC;AACpC,WAAO,UAAU,OAAO,aAAa,CAAC,MAAM,MAAM,OAAO;AACzD,WAAO,aAAa,IAAI,SAAS,IAAI,IAAI,MAAM,CAAC,IAAI;AACpD,WAAO,QAAQ;AAAA,EACnB,OACK;AACD,WAAO,QAAQ;AAAA,EACnB;AACA,SAAO;AACX;AAMA,IAAI,kBAAkB,SAAU,MAAM;AAClC,MAAI,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C,MAAI,8BAA8B,KAAK,QAAQ,WAAW,EAAE;AAC5D,MAAI,eAAe,SAAS,4BAA4B,OAAO,EAAE,GAAG,EAAE;AACtE,MAAI,0BAA0B,4BAA4B,UAAU,GAAG,EAAE;AACzE,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,IAAI,SAAS;AACrC,WAAO,SAAS,wBAAwB,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,EAC9E;AACA,MAAI,YAAY,MAAM;AACtB,SAAO,kBAAkB,cAAc,IAAI,IAAI,KAAK;AACxD;AAMA,IAAI,mBAAmB,SAAU,MAAM;AACnC,MAAI,WAAW,KAAK,QAAQ,WAAW,EAAE;AACzC,MAAI,eAAe,SAAS,SAAS,UAAU,GAAG,SAAS,SAAS,CAAC,GAAG,EAAE;AAC1E,MAAI,WAAW,SAAS,SAAS,UAAU,SAAS,SAAS,GAAG,SAAS,MAAM,GAAG,EAAE;AACpF,MAAI,YAAY,eAAe,OAAO,IAAI,KAAK,eAAe;AAC9D,SAAO,cAAc;AACzB;AAMA,IAAI,UAAU,SAAU,kBAAkB;AACtC,SAAO,iBAAiB,SAAS,GAAG;AAMhC,QAAI,OAAO,iBAAiB,MAAM,GAAG,CAAC;AACtC,QAAI,UAAU,SAAS,MAAM,EAAE;AAC/B,QAAI,MAAM,OAAO,GAAG;AAChB,aAAO;AAAA,IACX;AACA,uBAAoB,UAAU,KAAM,iBAAiB,MAAM,KAAK,MAAM;AAAA,EAC1E;AACA,SAAO,SAAS,kBAAkB,EAAE,IAAI;AAC5C;AAOA,IAAI,mBAAmB,SAAU,MAAM;AACnC,MAAI,WAAW,KAAK,QAAQ,WAAW,EAAE;AACzC,MAAI,WAAW,QAAQ,QAAQ;AAC/B,SAAO,aAAa;AACxB;AAMA,IAAI,kBAAkB,SAAU,MAAM;AAClC,MAAI,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClC,MAAI,eAAe,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AAC9C,MAAI,UAAU,KAAK,UAAU,GAAG,CAAC;AACjC,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,GAAG,SAAS;AACpC,WAAO,SAAS,QAAQ,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,EAC9D;AACA,MAAI,YAAY,MAAM;AACtB,SAAO,kBAAkB,cAAc,IAAI,IAAI,KAAK;AACxD;AAMA,IAAI,iBAAiB,SAAU,MAAM;AACjC,MAAI,oBAAoB,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AAChD,MAAI,iBAAiB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,CAAC;AACnD,MAAI,oBAAoB,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AACnD,MAAI,iBAAiB,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AAChD,MAAI,aAAa,KAAK,UAAU,GAAG,CAAC;AACpC,MAAI,UAAU,KAAK,UAAU,IAAI,EAAE;AACnC,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,GAAG,SAAS;AACpC,WAAO,SAAS,WAAW,OAAO,KAAK,GAAG,EAAE,IAAI,kBAAkB,KAAK;AAAA,EAC3E;AACA,MAAI,YAAY,MAAM;AACtB,MAAI,uBAAuB,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI,KAAK,YAAY;AACpF,WAAO;AAAA,EACX;AACA,QAAM;AACN,WAAS,QAAQ,GAAG,QAAQ,IAAI,SAAS;AACrC,WAAO,SAAS,QAAQ,OAAO,KAAK,GAAG,EAAE,IAAI,eAAe,KAAK;AAAA,EACrE;AACA,cAAY,MAAM;AAClB,SAAO,oBAAoB,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI,KAAK;AAChF;AAMA,IAAI,eAAe,SAAU,SAAS,SAAS;AAC3C,MAAI,KAAK;AACT,WAAS,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,SAAS;AACjD,UAAM,SAAS,QAAQ,OAAO,KAAK,GAAG,EAAE;AACxC,QAAI,KAAK,OAAO,GAAG;AACf,WAAK,KAAK;AAAA,IACd;AACA,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AACA,SAAO,aAAa,KAAK,OAAO,KAAK,IAAI,KAAK;AAClD;AAMA,IAAI,oBAAoB,SAAU,MAAM;AACpC,MAAI,oBAAoB,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AACnD,MAAI,iBAAiB,SAAS,KAAK,OAAO,EAAE,GAAG,EAAE;AACjD,MAAI,aAAa,KAAK,UAAU,GAAG,CAAC;AACpC,MAAI,UAAU,KAAK,UAAU,GAAG,EAAE;AAClC,SAAO,aAAa,YAAY,iBAAiB,KAAK,aAAa,SAAS,cAAc;AAC9F;AAMA,IAAI,0BAA0B,SAAU,MAAM;AAC1C,MAAI,gBAAgB,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AACtC,MAAI,gBAAgB,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAClD,MAAI,gBAAgB,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AAC/C,MAAI,gBAAgB,SAAS,KAAK,OAAO,EAAE,GAAG,EAAE;AAChD,MAAI,SAAS,KAAK,UAAU,GAAG,CAAC;AAChC,MAAI,SAAS,KAAK,UAAU,IAAI,EAAE;AAClC,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,OAAO,QAAQ,SAAS;AAChD,WAAO,SAAS,OAAO,OAAO,KAAK,GAAG,EAAE,IAAI,cAAc,KAAK;AAAA,EACnE;AACA,MAAI,YAAY,MAAM;AACtB,MAAI,mBAAmB,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI,KAAK,YAAY;AAChF,WAAO;AAAA,EACX;AACA,QAAM;AACN,WAAS,QAAQ,GAAG,QAAQ,OAAO,QAAQ,SAAS;AAChD,WAAO,SAAS,OAAO,OAAO,KAAK,GAAG,EAAE,IAAI,cAAc,KAAK;AAAA,EACnE;AACA,cAAY,MAAM;AAClB,SAAO,mBAAmB,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI,KAAK;AAC/E;AAMA,IAAI,oBAAoB,SAAU,MAAM;AACpC,MAAI,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACpD,MAAI,eAAe,SAAS,KAAK,OAAO,EAAE,GAAG,EAAE;AAC/C,MAAI,UAAU,KAAK,UAAU,GAAG,EAAE;AAClC,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,SAAS;AACjD,WAAO,SAAS,QAAQ,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,EAC9D;AACA,MAAI,YAAY,MAAM;AACtB,SAAO,kBAAkB,cAAc,IAAI,IAAI,KAAK;AACxD;AAOA,IAAI,kBAAkB,SAAU,MAAM;AAClC,MAAI,WAAW,KAAK,QAAQ,WAAW,EAAE;AACzC,MAAI,aAAa,MAAM,KAAK,QAAQ;AACpC,WAAS,QAAQ,GAAG,QAAQ,SAAS,QAAQ,SAAS;AAClD,QAAI,IAAI,WAAW,KAAK,EAAE,WAAW,CAAC;AACtC,QAAI,KAAK,IAAI;AACT,cAAQ,GAAG;AAAA,QACP,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,KAAK,IAAI;AACpB;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,YAAY,QAAQ,WAAW,KAAK,EAAE,CAAC;AAC3C,SAAO,cAAc;AACzB;AAMA,IAAI,qBAAqB,SAAU,MAAM;AACrC,MAAI,UAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC1D,MAAI,yBAAyB,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AACxD,MAAI,oBAAoB,KAAK,UAAU,GAAG,CAAC;AAC3C,MAAI,MAAM;AACV,WAAS,QAAQ,GAAG,QAAQ,kBAAkB,QAAQ,SAAS;AAC3D,WAAO,SAAS,kBAAkB,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,EACxE;AACA,MAAI,YAAY,MAAM;AACtB,MAAI,4BAA4B,cAAc,IAAI,IAAI,KAAK,YAAY;AACnE,WAAO;AAAA,EACX;AACA,QAAM;AACN,MAAI,KAAK,SAAS,UAAU,GAAG;AAC3B,QAAI,iBAAiB,KAAK,UAAU,GAAG,EAAE;AACzC,QAAI,sBAAsB,SAAS,KAAK,OAAO,EAAE,GAAG,EAAE;AACtD,aAAS,QAAQ,GAAG,QAAQ,eAAe,QAAQ,SAAS;AACxD,aAAO,SAAS,eAAe,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,IACrE;AACA,QAAI,cAAc,MAAM;AACxB,WAAO,yBAAyB,gBAAgB,IAAI,IAAI,KAAK;AAAA,EACjE,OACK;AACD,QAAI,iBAAiB,KAAK,UAAU,GAAG,EAAE;AACzC,QAAI,sBAAsB,SAAS,KAAK,OAAO,EAAE,GAAG,EAAE;AACtD,aAAS,QAAQ,GAAG,QAAQ,eAAe,QAAQ,SAAS;AACxD,aAAO,SAAS,eAAe,OAAO,KAAK,GAAG,EAAE,IAAI,QAAQ,KAAK;AAAA,IACrE;AACA,QAAI,cAAc,MAAM;AACxB,WAAO,yBAAyB,gBAAgB,IAAI,IAAI,KAAK;AAAA,EACjE;AACJ;AAOO,IAAI,2BAA2B,SAAU,SAAS,MAAM;AAC3D,MAAI,OAAO,aAAa,OAAO,MAAM,aAAa;AAC9C,WAAO;AAAA,EACX;AACA,eAAa,OAAO,EAAE,uBAAuB;AAC7C,SAAO;AACX;AAIO,IAAI,eAAe;AAAA,EACtB,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,EAAE,OAAO,IAAI,aAAa,eAAe,cAAc,MAAM,MAAM,MAAM,iBAAiB,MAAM;AAAA,EACpG,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,EAAE,OAAO,IAAI,aAAa,cAAc;AAAA,EAC5C,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,sBAAsB;AAAA,IACtB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,EAAE,OAAO,IAAI,aAAa,eAAe,cAAc,MAAM,MAAM,MAAM,iBAAiB,MAAM;AAAA,EACpG,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,sBAAsB;AAAA,IACtB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,iBAAiB;AAAA,EACrB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,EAAE,OAAO,IAAI,aAAa,eAAe,cAAc,MAAM,MAAM,MAAM,iBAAiB,MAAM;AAAA,EACpG,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,IACpB,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,MAAM;AAAA,EACV;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,oBAAoB;AAAA,EACxB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,EACxB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,MAAM;AAAA,IACN,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,qBAAqB;AAAA,EACzB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI;AAAA,IACA,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,EAClB;AAAA,EACA,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AAAA,EACL,IAAI,CAAC;AACT;",
  "names": ["ValidationErrorsIBAN", "ValidationErrorsBIC"]
}
